}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
View(airports)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
dbWriteTable(dbConn, "airports", airports, overwrite = T, append = F, row.names = F)
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
dbWriteTable(dbConn, "airports", airports, overwrite = T, append = F, row.names = F)
dbWriteTable(dbConn, "airports", airports, overwrite = T, append = F, row.names = F)
dbWriteTable(dbConn, "airports", airports, overwrite = T, row.names = F)
dbWriteTable(dbConn, "airports", airports, overwrite = F, row.names = F)
dbWriteTable(dbConn, "airports", airports)
View(airports)
dbWriteTable(dbConn, "conditions", bds.conditions, overwrite = T)
dbWriteTable(dbConn, "airports", airports)
dbWriteTable(dbConn, "airports", airports, overwrite = T)
dbWriteTable(dbConn, "airports", airports, append = T)
dbWriteTable(dbConn, "airports", airports, append = T, row.names = F)
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
library(RMySQL)
db.user <- 'agni'
db.password <- 'Practicum$5200'
db.name <- 'practicum1'
db.host <- 'practicum1.mysql.database.azure.com'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
query <- "SELECT MONTHNAME(f.date) AS month_name, SUM(s.numbirds) AS cnt
FROM flights f
JOIN strikes s ON s.fid = f.fid
GROUP BY month_name
ORDER BY cnt DESC;"
total.per.month <- dbGetQuery(conn = dbConn, statement = query)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
query <- "SELECT MONTHNAME(f.date) AS month_name, SUM(s.numbirds) AS cnt
FROM flights f
JOIN strikes s ON s.fid = f.fid
GROUP BY month_name
ORDER BY cnt DESC;"
total.per.month <- dbGetQuery(conn = dbConn, statement = query)
head(total.per.month, n = 6)
query <- "SELECT MONTHNAME(f.date) AS month_name, SUM(s.numbirds) AS cnt
FROM flights f
JOIN strikes s ON s.fid = f.fid AND YEAR(f.date) > 1970
GROUP BY month_name
ORDER BY cnt DESC;"
total.per.month <- dbGetQuery(conn = dbConn, statement = query)
head(total.per.month, n = 6)
library(RMySQL)
library(DBI)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
con <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
# con <- dbConnect(RMySQL::MySQL(),
#                 name = "sql9654742",
#                 host = "sql9.freemysqlhosting.net",
#                 user = "sql9654742",
#                 password = "tUkfyniaSk",
#                 port = 3306);
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
bds.raw <- read.csv(url("https://s3.us-east-2.amazonaws.com/artificium.us/datasets/BirdStrikesData-V2.csv"))
bds.airports <- bds.raw[, c("airport", "origin")]
bds.airports[] <- lapply(bds.airports, function(col) ifelse(col %in% c('N/A', ''), 'Unknown', col))
# Airports
grouped.bds.airports <- lapply(split(bds.airports, bds.airports$origin), unique)
airports <- do.call(rbind, grouped.bds.airports)
row.names(airports) <- NULL
colnames(airports) <- c("airportName", "airportState")
n.airports <- nrow(airports)
airports$aid <- 1:n.airports
# Flights
bds.flights <- bds.raw[, c("rid", "flight_date", "airport", "origin", "airline", "aircraft", "altitude_ft", "heavy_flag")]
bds.flights$origin <- bds.airports$origin
bds.flights$airport <- bds.airports$airport
colnames(bds.flights) <- c("fid", "date", "airport", "origin", "airline", "aircraft", "altitude", "heavy")
bds.flights[] <- lapply(bds.flights, function(col) ifelse(col == '', 'Unknown', col))
n.flights <- nrow(bds.flights)
clean_date <- function(date) {
if (date == 'Unknown') {
return("1970-01-01")
} else {
split.timestamp <- strsplit(date, " ")
split.date <- unlist(strsplit(split.timestamp[[1]][1], '/'))
split.date[1:2] <- sprintf("%02d", as.integer(split.date[1:2]))
return(paste0(split.date[3], "-", split.date[1], "-", split.date[2]))
}
}
for (i in 1:n.flights) {
bds.flights$origin[i] <- which(airports$airportName == bds.flights$airport[i] & airports$airportState == bds.flights$origin[i])
bds.flights$date[i] <- clean_date(bds.flights$date[i])
# Can optimize think of lapply
bds.flights$airline[i] <- gsub("*", "", bds.flights$airline[i])
if (bds.flights$altitude[i] == 'Unknown') {
bds.flights$altitude[i] <- 999999
} else {
bds.flights$altitude[i] <- as.integer(gsub(",", "", bds.flights$altitude[i]))
}
bds.flights$heavy[i] <- !grepl("Unknown|No", bds.flights$heavy[i])
}
bds.flights$airport <- NULL
bds.flights$fid <- as.integer(bds.flights$fid)
bds.flights$origin <- as.integer(bds.flights$origin)
bds.flights$altitude <- as.integer(bds.flights$altitude)
# Conditions
bds.conditions <- bds.raw[, c("sky_conditions", "Remarks")]
bds.conditions <- bds.conditions[!duplicated(bds.conditions$sky_conditions), ]
bds.conditions$cid <- 1:nrow(bds.conditions)
bds.conditions$Remarks <- NULL
colnames(bds.conditions) <- c("sky_condition", "cid")
# Strikes
bds.strikes <- bds.raw[, c("wildlife_struck", "impact", "damage", "sky_conditions")]
bds.strikes$fid <- bds.flights$fid
bds.strikes$altitude <- bds.flights$altitude
colnames(bds.strikes) <- c("numbirds", "impact", "damage", "conditions", "fid", "altitude")
for (i in 1:nrow(bds.strikes)) {
bds.strikes$conditions[i] <- which(bds.conditions$sky_condition == bds.strikes$conditions[i])
}
bds.strikes$conditions <- as.integer(bds.strikes$conditions)
bds.strikes$numbirds <- as.integer(bds.strikes$numbirds)
# dbWriteTable(dbConn, "airports", airports, append = T, row.names = F)
# for (i in 1:500) {
#     sql <- sprintf('INSERT INTO flights VALUES (%d, "%s", %d, "%s", "%s", %d, %s)', bds.flights$fid[i], bds.flights$date[i], bds.flights$origin[i], bds.flights$airline[i], bds.flights$aircraft[i], bds.flights$altitude[i], bds.flights$heavy[i])
#
#   dbSendStatement(conn = dbConn, statement = sql)
# }
#
#   dbWriteTable(dbConn, "conditions", bds.conditions, append = T, row.names = F)
#
# for (i in 1:500) {
#     sqlStmt <- sprintf('INSERT INTO strikes(fid, numbirds, impact, damage, altitude, conditions) VALUES (%d, %d, "%s", "%s", %d, %d)', bds.strikes$fid[i], bds.strikes$numbirds[i], bds.strikes$impact[i], bds.strikes$damage[i], bds.strikes$altitude[i], bds.strikes$conditions[i])
#     nr <- dbSendStatement(conn = dbConn, statement = sqlStmt)
# }
View(bds.airports)
View(bds.flights)
View(bds.strikes)
bds.raw <- read.csv(url("https://s3.us-east-2.amazonaws.com/artificium.us/datasets/BirdStrikesData-V2.csv"))
bds.airports <- bds.raw[, c("airport", "origin")]
bds.airports[] <- lapply(bds.airports, function(col) ifelse(col %in% c('N/A', ''), 'Unknown', col))
# Airports
grouped.bds.airports <- lapply(split(bds.airports, bds.airports$origin), unique)
airports <- do.call(rbind, grouped.bds.airports)
row.names(airports) <- NULL
colnames(airports) <- c("airportName", "airportState")
n.airports <- nrow(airports)
airports$aid <- 1:n.airports
# Flights
bds.flights <- bds.raw[, c("rid", "flight_date", "airport", "origin", "airline", "aircraft", "altitude_ft", "heavy_flag")]
bds.flights$origin <- bds.airports$origin
bds.flights$airport <- bds.airports$airport
colnames(bds.flights) <- c("fid", "date", "airport", "origin", "airline", "aircraft", "altitude", "heavy")
bds.flights[] <- lapply(bds.flights, function(col) ifelse(col == '', 'Unknown', col))
n.flights <- nrow(bds.flights)
clean_date <- function(date) {
if (date == 'Unknown') {
return("1970-01-01")
} else {
split.timestamp <- strsplit(date, " ")
split.date <- unlist(strsplit(split.timestamp[[1]][1], '/'))
split.date[1:2] <- sprintf("%02d", as.integer(split.date[1:2]))
return(paste0(split.date[3], "-", split.date[1], "-", split.date[2]))
}
}
for (i in 1:n.flights) {
bds.flights$origin[i] <- which(airports$airportName == bds.flights$airport[i] & airports$airportState == bds.flights$origin[i])
bds.flights$date[i] <- clean_date(bds.flights$date[i])
# Can optimize think of lapply
bds.flights$airline[i] <- gsub("*", "", bds.flights$airline[i])
if (bds.flights$altitude[i] == 'Unknown') {
bds.flights$altitude[i] <- 999999
} else {
bds.flights$altitude[i] <- as.integer(gsub(",", "", bds.flights$altitude[i]))
}
bds.flights$heavy[i] <- !grepl("Unknown|No", bds.flights$heavy[i])
}
bds.flights$airport <- NULL
bds.flights$fid <- as.integer(bds.flights$fid)
bds.flights$origin <- as.integer(bds.flights$origin)
bds.flights$altitude <- as.integer(bds.flights$altitude)
# Conditions
bds.conditions <- bds.raw[, c("sky_conditions", "Remarks")]
bds.conditions <- bds.conditions[!duplicated(bds.conditions$sky_conditions), ]
bds.conditions$cid <- 1:nrow(bds.conditions)
bds.conditions$Remarks <- NULL
colnames(bds.conditions) <- c("sky_condition", "cid")
# Strikes
bds.strikes <- bds.raw[, c("wildlife_struck", "impact", "damage", "sky_conditions")]
bds.strikes$fid <- bds.flights$fid
bds.strikes$altitude <- bds.flights$altitude
colnames(bds.strikes) <- c("numbirds", "impact", "damage", "conditions", "fid", "altitude")
for (i in 1:nrow(bds.strikes)) {
bds.strikes$conditions[i] <- which(bds.conditions$sky_condition == bds.strikes$conditions[i])
}
bds.strikes$conditions <- as.integer(bds.strikes$conditions)
bds.strikes$numbirds <- as.integer(bds.strikes$numbirds)
bds.strikes$sid <- 1:nrow(bds.strikes)
# dbWriteTable(dbConn, "airports", airports, append = T, row.names = F)
# for (i in 1:500) {
#     sql <- sprintf('INSERT INTO flights VALUES (%d, "%s", %d, "%s", "%s", %d, %s)', bds.flights$fid[i], bds.flights$date[i], bds.flights$origin[i], bds.flights$airline[i], bds.flights$aircraft[i], bds.flights$altitude[i], bds.flights$heavy[i])
#
#   dbSendStatement(conn = dbConn, statement = sql)
# }
#
#   dbWriteTable(dbConn, "conditions", bds.conditions, append = T, row.names = F)
#
# for (i in 1:500) {
#     sqlStmt <- sprintf('INSERT INTO strikes(fid, numbirds, impact, damage, altitude, conditions) VALUES (%d, %d, "%s", "%s", %d, %d)', bds.strikes$fid[i], bds.strikes$numbirds[i], bds.strikes$impact[i], bds.strikes$damage[i], bds.strikes$altitude[i], bds.strikes$conditions[i])
#     nr <- dbSendStatement(conn = dbConn, statement = sqlStmt)
# }
View(bds.strikes)
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
# sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
#
# dbSendQuery(dbConn, sql)
sql <- "SELECT MAX(sid) FROM strikes;"
result <- dbGetQuery(dbConn, query)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
# sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
#
# dbSendQuery(dbConn, sql)
sql <- "SELECT MAX(sid) FROM strikes;"
result <- dbGetQuery(dbConn, query)
print(result)
View(result)
# sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
#
# dbSendQuery(dbConn, sql)
sql <- "SELECT MAX(sid) FROM strikes;"
res <- dbGetQuery(dbConn, query)
print(res)
View(res)
sql <- "SELECT MAX(sid) FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(res)
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(res)
print(res$id[[1]][1])
# sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
#
# dbSendQuery(dbConn, sql)
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(paste("The id of the newly inserted strike is", res$id[[1]][1]))
sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
dbSendQuery(dbConn, sql)
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
dbSendQuery(dbConn, sql)
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
sql <- "CALL CreateStrike('2012-03-02','Kempegowda Airport', 'Bangalore', 'UNITED AIRWAYS', 'Airplane', 6970, FALSE, 600, 'None', 'No Damage', 'Overcast');"
dbSendQuery(dbConn, sql)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
status <- dbDisconnect(dbConn)
if (status) {
print("Disconnect from DB!")
} else {
print("Couldn't disconnect!")
}
library(RMySQL)
db.user <- 'sql3655243'
db.password <- 'sH4erseaMm'
db.name <- 'sql3655243'
db.host <- 'sql3.freemysqlhosting.net'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(paste("The id of the newly inserted strike is", res$id[[1]][1]))
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(paste("The id of the newly inserted strike is", res$id[[1]][1]))
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(paste("The id of the newly inserted strike is", res$id[[1]][1]))
View(bds.strikes)
library(RMySQL)
db.user <- 'admin'
db.password <- 'omagarwal86'
db.name <- 'dbbirdstrikes'
db.host <- 'dbms-practicum-1.ckaxw7lvptoz.us-east-2.rds.amazonaws.com'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
library(RMySQL)
db.user <- 'admin'
db.password <- 'omagarwal86'
db.name <- 'dbbirdstrikes'
db.host <- 'dbms-practicum-1.ckaxw7lvptoz.us-east-2.rds.amazonaws.com'
db.port <- 3306
dbConn <-  dbConnect(RMySQL::MySQL(), user = db.user, password = db.password,
dbname = db.name, host = db.host, port = db.port)
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(paste("The id of the newly inserted strike is", res$id[[1]][1]))
sql <- "SELECT MAX(sid) as id FROM strikes;"
res <- dbGetQuery(dbConn, sql)
print(paste("The id of the the last strike is", res$id[[1]][1]))
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::install_prebuilt()
View(bds.airports)
View(bds.conditions)
View(bds.flights)
View(grouped.bds.airports)
View(grouped.bds.airports)
View(airports)
unlink("ChatterjeeA.ExploreDataWarehouse.F23_cache", recursive = TRUE)
